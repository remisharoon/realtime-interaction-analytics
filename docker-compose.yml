services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - kafka-network
    restart: always
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9092:9092"
    networks:
      - kafka-network
    restart: always
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  producer:
    build: ./producer
    container_name: producer
    environment:
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=rt_interactions
    volumes:
      - ./logs/producer:/app/logs
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka-network
    restart: always

  spark:
    image: remisharoon/rt_spark:latest
    build: ./spark
    container_name: spark
    environment:
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=rt_interactions
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
    volumes:
      - ./logs/spark:/app/logs
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka-network
    restart: always
    ports:
      - "4040:4040"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4040"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.3
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - kafka-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.3
    container_name: kibana
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    volumes:
      - kibana-data:/usr/share/kibana/data
    networks:
      - kafka-network
    restart: always


networks:
  kafka-network:
    name: kafka-network

volumes:
  elasticsearch-data:
    driver: local
  kibana-data:
    driver: local